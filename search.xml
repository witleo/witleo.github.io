<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring cloud gateway解决跨域问题</title>
      <link href="/2021/08/02/spring-cloud-gateway-jie-jue-kua-yu-wen-ti/"/>
      <url>/2021/08/02/spring-cloud-gateway-jie-jue-kua-yu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前后端分离开发时，我们经常会遇到跨域问题</p><h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><ol><li><p>什么是同源策略及其限制内容？</p><p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p></li></ol><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/2019-01-26-01.png" alt="img"></p><ol start="2"><li><p>请求跨域了，那么请求到底发出去没有？</p><p>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>跨域问题如何解决？</p><p>绝大多数解决方式无非是以下三类</p><ol><li><p>服务器设置为允许跨域访问，后端实现 CORS</p></li><li><p>使用中间件代理、过滤器或者nginx反向代理等，通过同源策略对服务器不加限制</p></li><li><p>利用 iframe、script标签没有跨域限制的漏洞，或者使用websocket请求，规避掉跨域问题</p></li></ol><h2 id="前端解决方式"><a href="#前端解决方式" class="headerlink" title="前端解决方式"></a>前端解决方式</h2><blockquote><p>在 <code>dev</code> 开发模式下可以下使用 webpack 的 <code>proxy</code> 使用也是很方便，参照 <a href="https://www.webpackjs.com/configuration/dev-server/#devserver-proxy">文档</a> 就会使用了。但这种方法在生产环境是不能使用的。在生产环境中需要使用 <code>nginx</code> 进行反向代理。不管是 <code>proxy</code> 和 <code>nginx</code> 的原理都是一样的，通过搭建一个中转服务器来转发请求规避跨域的问题。</p></blockquote><table><thead><tr><th align="center">开发环境</th><th align="center">生产环境</th></tr></thead><tbody><tr><td align="center">cors</td><td align="center">cors</td></tr><tr><td align="center">proxy</td><td align="center">nginx</td></tr></tbody></table><p>这里我只推荐这两种方式跨域，其它的跨域方式都还有很多但都不推荐</p><h2 id="后端解决方式"><a href="#后端解决方式" class="headerlink" title="后端解决方式"></a>后端解决方式</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</p><blockquote><p> <code>cors</code> 全称为 Cross Origin Resource Sharing（跨域资源共享）。这种方案对于前端来说没有什么工作量，和正常发送请求写法上没有任何区别，工作量基本都在后端这里。每一次请求，浏览器必须先以 <code>OPTIONS</code> 请求方式发送一个预请求（也不是所有请求都会发送 options，展开介绍 <a href="https://panjiachen.github.io/awesome-bookmarks/blog/cs.html#cors">点我</a>），通过预检请求从而获知服务器端对跨源请求支持的 <code>HTTP</code> 方法。在确认服务器允许该跨源请求的情况下，再以实际的 <code>HTTP</code> 请求方法发送那个真正的请求。推荐的原因是：只要第一次配好了，之后不管有多少接口和项目复用就可以了，一劳永逸的解决了跨域问题，而且不管是开发环境还是正式环境都能方便的使用。</p></blockquote><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/CORS_principle.png" alt="CORS"></p><h3 id="在spring-cloud-gateway项目中解决跨域"><a href="#在spring-cloud-gateway项目中解决跨域" class="headerlink" title="在spring cloud gateway项目中解决跨域"></a>在spring cloud gateway项目中解决跨域</h3><p>增加以下两个类既可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.him.gateway.config;import com.him.gateway.filter.CorsResponseHeaderFilter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.reactive.CorsWebFilter;import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;&#x2F;** * 配置跨域问题 * * @author liaoyuxing * @date 2021-5-20 *&#x2F;@Configurationpublic class CorsConfig &#123;    @Bean    public CorsResponseHeaderFilter corsResponseHeaderFilter() &#123;        return new CorsResponseHeaderFilter();    &#125;    @Bean    public CorsWebFilter corsWebFilter() &#123;        UrlBasedCorsConfigurationSource source &#x3D; new UrlBasedCorsConfigurationSource();        CorsConfiguration corsConfiguration &#x3D; new CorsConfiguration();        corsConfiguration.addAllowedHeader(&quot;*&quot;);        corsConfiguration.addAllowedMethod(&quot;*&quot;);        corsConfiguration.addAllowedOrigin(&quot;*&quot;);        corsConfiguration.setAllowCredentials(true);        corsConfiguration.setMaxAge(600L);        source.registerCorsConfiguration(&quot;&#x2F;**&quot;, corsConfiguration);        return new CorsWebFilter(source);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.him.gateway.filter;import org.springframework.cloud.gateway.filter.GatewayFilterChain;import org.springframework.cloud.gateway.filter.GlobalFilter;import org.springframework.cloud.gateway.filter.NettyWriteResponseFilter;import org.springframework.core.Ordered;import org.springframework.http.HttpHeaders;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;import java.util.ArrayList;&#x2F;** * 跨域请求头重复处理过滤器 * * @author liaoyuxing * @date 2021-5-20 *&#x2F;public class CorsResponseHeaderFilter implements GlobalFilter, Ordered &#123;    @Override    public int getOrder() &#123;        &#x2F;&#x2F; 指定此过滤器位于NettyWriteResponseFilter之后        &#x2F;&#x2F; 即待处理完响应体后接着处理响应头        return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER + 1;    &#125;    @Override    @SuppressWarnings(&quot;serial&quot;)    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        return chain.filter(exchange).then(Mono.defer(() -&gt; &#123;            exchange.getResponse().getHeaders().entrySet().stream()                    .filter(kv -&gt; (kv.getValue() !&#x3D; null &amp;&amp; kv.getValue().size() &gt; 1))                    .filter(kv -&gt; (kv.getKey().equals(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)                            || kv.getKey().equals(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)))                    .forEach(kv -&gt;                    &#123;                        kv.setValue(new ArrayList&lt;String&gt;() &#123;&#123;                            add(kv.getValue().get(0));                        &#125;&#125;);                    &#125;);            return chain.filter(exchange);        &#125;));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a></li><li><a href="https://www.cnblogs.com/fundebug/p/10329202.html">https://www.cnblogs.com/fundebug/p/10329202.html</a></li><li><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/cors.html">https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/cors.html</a></li><li><a href="https://www.webpackjs.com/configuration/dev-server/#devserver-proxy">https://www.webpackjs.com/configuration/dev-server/#devserver-proxy</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 乱七八糟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloud gateway </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Maven Profile和nacos namespace+group实现环境隔离</title>
      <link href="/2021/08/02/shi-yong-maven-he-nacos-shi-xian-huan-jing-ge-chi/"/>
      <url>/2021/08/02/shi-yong-maven-he-nacos-shi-xian-huan-jing-ge-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ol><li>在开发过程中需要修改服务的nacos地址（或其他公共配置）时，需要每个微服务配置文件都改一遍</li><li>几乎nacos每个微服务的配置文件中都含有相同的配置（例如数据库配置），当需要修改数据库连接地址时每个nacos配置文件都改一遍</li><li>在不同的项目中会存在相同的模块名(global-auth),会有nacos的Data ID重复的情况</li><li>对应不同的环境应有多套配置文件（如测试环境、开发环境、linux环境和windows环境等等）</li><li>如何在不改动代码的情况下快速发布、部署多个环境下的代码</li></ol><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><h2 id="使用Nacos-Namespace进行多环境配置"><a href="#使用Nacos-Namespace进行多环境配置" class="headerlink" title="使用Nacos Namespace进行多环境配置"></a>使用Nacos Namespace进行多环境配置</h2><p>首先，nacos为我们提供了多种环境隔离的方案，可以根据项目规模、参与开发人数和业务规划等多个角度可以确定我们的最优方案</p><blockquote><p>第一种：通过Data ID与profile实现。</p><p>优点：这种方式与Spring Cloud Config的实现非常像，用过Spring Cloud<br>Config的用户，可以毫无违和感的过渡过来，由于命名规则类似，所以要从Spring Cloud Config中做迁移也非常简单。<br>缺点：这种方式在项目与环境多的时候，配置内容就会显得非常混乱。配置列表中会看到各种不同应用，不同环境的配置交织在一起，非常不利于管理。<br>建议：项目不多时使用，或者可以结合Group对项目根据业务或者组织架构做一些拆分规划。<br> 第二种：通过Group实现。</p><p>优点：通过Group按环境讲各个应用的配置隔离开。可以非常方便的利用Data<br>ID和Group的搜索功能，分别从应用纬度和环境纬度来查看配置。<br>缺点：由于会占用Group纬度，所以需要对Group的使用做好规划，毕竟与业务上的一些配置分组起冲突等问题。<br>建议：这种方式虽然结构上比上一种更好一些，但是依然可能会有一些混乱，主要是在Group的管理上要做好规划和控制。<br>第三种：通过Namespace实现。</p><p>优点：官方建议的方式，通过Namespace来区分不同的环境，释放了Group的自由度，这样可以让Group的使用专注于做业务层面的分组管理。同时，Nacos控制页面上对于Namespace也做了分组展示，不需要搜索，就可以隔离开不同的环境配置，非常易用。<br>缺点：没有啥缺点，可能就是多引入一个概念，需要用户去理解吧。<br>建议：直接用这种方式长远上来说会比较省心。虽然可能对小团队而言，项目不多，第一第二方式也够了，但是万一后面做大了呢？<br>参考文章：<a href="https://blog.csdn.net/jav_zhangwei/article/details/109728425?spm=1001.2014.3001.5501">Nacos配置细化</a></p></blockquote><p>过程不再讨论，这里直接说结论：<br>Namespace区分环境<br>Group区分项目<br>Data ID区分服务，不再使用profiles<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210602142201474.png" alt="在这里插入图片描述"></p><h2 id="Nacos开启shared-configs配置共享，读取多个配置"><a href="#Nacos开启shared-configs配置共享，读取多个配置" class="headerlink" title="Nacos开启shared-configs配置共享，读取多个配置"></a>Nacos开启shared-configs配置共享，读取多个配置</h2><p>在实际项目中，每个子模块中，spring有许多相同配置项，比如Redis,Mysql等等，这些公用配置信息，可以放在同一个配置文件中，方便管理及修改</p><p>将数据库连接和其他公共配置，分别放在两个yml文件中</p><pre class="line-numbers language-none"><code class="language-none"># 1.公共配置  shared-configs[0]:  data-id: application.$&#123;spring.cloud.nacos.config.file-extension&#125; # 配置文件名-Data Id  group: $&#123;nacos.group&#125;   # 默认为DEFAULT_GROUP  refresh: true   # 是否动态刷新，默认为false# 2.数据库配置shared-configs[1]:  data-id: datasource.$&#123;spring.cloud.nacos.config.file-extension&#125;  group: $&#123;nacos.group&#125;  refresh: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用Maven-Profile实现项目内的环境统一"><a href="#使用Maven-Profile实现项目内的环境统一" class="headerlink" title="使用Maven Profile实现项目内的环境统一"></a>使用Maven Profile实现项目内的环境统一</h2><p>​        在开发过程中，我们的项目会存在不同的运行环境，比如开发环境、测试环境、生产环境，而我们的项目在不同的环境中，有的配置可能会不一样，比如数据源配置、日志文件配置、以及一些软件运行过程中的基本配置，那每次我们将软件部署到不同的环境时，都需要修改相应的配置文件，这样来回修改，很容易出错，而且浪费劳动力。</p><p>​        我们使用Maven Profile来让微服务的配置项变成一个动态参数，在pom文件中进行统一维护，可以让多个微服务的配置进行同步修改。首先，添加的你的多环境配置参数，修改项目父pom文件，pom文件新增配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.namespace</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.namespace</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.group</span><span class="token punctuation">></span></span>HIM_GROUP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.server-addr</span><span class="token punctuation">></span></span>127.0.0.1:8838<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.server-addr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.namespace</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.namespace</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.group</span><span class="token punctuation">></span></span>HIM_GROUP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.server-addr</span><span class="token punctuation">></span></span>192.168.3.10:8838<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.server-addr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.namespace</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.namespace</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.group</span><span class="token punctuation">></span></span>HIM_GROUP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nacos.server-addr</span><span class="token punctuation">></span></span>192.168.3.10:8838<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nacos.server-addr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml文件的配置修改如下：</p><pre class="line-numbers language-none"><code class="language-none"># Springspring:  application:    # 应用名称    name: global-gateway  main:    allow-bean-definition-overriding: true  cloud:    nacos:      discovery:        # 服务注册地址        server-addr: $&#123;nacos.server-addr&#125;        group: $&#123;nacos.group&#125;        namespace: $&#123;nacos.namespace&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml文件中对应的&#36;{nacos.server-addr}等即为pom.xml文件的配置值</p><p>其中pom.xml文件中的activation标签代表当前启用的环境，打包时会默认打包activation所标记的环境<br>使用maven打包时可以通过 -P 参数来指定环境<br>例如：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">mvn clean package -P test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上打包命令表示使用测试环境进行打包，这样就可以实现使用打包命令而不改动代码对多个环境进行发布</p><p>当你想打包的环境信息不在pom文件中时，你还可以通过mvn -Dxxx来指定maven的打包参数<br>例如：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">mvn -Dnacos.server-addr&#x3D;127.0.0.1:8848 -Dnacos.namespace&#x3D;prod  clean package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>总结：</p><p>好了，刚刚我们列出了三种打包方式</p><ol><li><p>mvn clean package</p></li><li><p>mvn clean package -P test</p></li><li><p>mvn -Dnacos.server-addr=127.0.0.1:8848 -Dnacos.namespace=prod  clean package</p></li></ol><p>第一种会使用activation标签所标记位置的参数打包（上面的例子中是dev环境）</p><p>第二种会使用-P 参数指定的的环境名进行打包</p><p>第三种会直接使用指定的配置进行打包</p><p>注：当使用-P 指定环境后，activation标签不再生效</p><p>当使用-D 指定具体参数时</p><p>对于已指定参数，前两种方法也不再生效</p><p>对于未指定的参数，优先级规则依然是 -P &gt;activation标签</p><p>优先级：3&gt;2&gt;1</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>使用Nacos Namespace配置解决了问题3和4<br>shared-configs配置解决了问题2<br>Maven Profile解决了问题1和5</p><p>global-auth服务的完整配置：</p><pre class="line-numbers language-none"><code class="language-none"># Springspring:  application:    # 应用名称    name: global-auth  cloud:    nacos:      discovery:        # 服务注册地址        server-addr: $&#123;nacos.server-addr&#125;        group: $&#123;nacos.group&#125;        namespace: $&#123;nacos.namespace&#125;      config:        # 配置中心地址        server-addr: $&#123;nacos.server-addr&#125;        # 配置文件格式        file-extension: yml        group: $&#123;nacos.group&#125;        namespace: $&#123;nacos.namespace&#125;        # 1.公共配置        shared-configs[0]:          data-id: application.$&#123;spring.cloud.nacos.config.file-extension&#125; # 配置文件名-Data Id          group: $&#123;nacos.group&#125;   # 默认为DEFAULT_GROUP          refresh: true   # 是否动态刷新，默认为false        # 2.数据库配置        shared-configs[1]:          data-id: datasource.$&#123;spring.cloud.nacos.config.file-extension&#125;          group: $&#123;nacos.group&#125;          refresh: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：<a href="https://blog.csdn.net/jav_zhangwei/article/details/109728425?spm=1001.2014.3001.5501">https://blog.csdn.net/jav_zhangwei/article/details/109728425?spm=1001.2014.3001.5501</a></p>]]></content>
      
      
      <categories>
          
          <category> 乱七八糟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用vuex+mixin优化数据字典的存取方案</title>
      <link href="/2021/08/02/li-yong-vuex-mixin-you-hua-shu-ju-zi-dian/"/>
      <url>/2021/08/02/li-yong-vuex-mixin-you-hua-shu-ju-zi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h1><p>在Vue或React项目中经常会遇到比如下拉框的数据字典之类的，是在页面创建时获取数据字典，然后解析显示。<br>不同的页面使用同一个数据字典或者页面重复打开时都会发送多次相同请求，会造成时间和性能的浪费。<br>数据字典的解析在页面中使用重复率高，模式统一，在各个页面内存在大量重复代码，非常不符合代码复用思想，我们可以利用“混入”提升代码复用率。</p><p>简单的说，我们需要实现两点：<br>1.将请求过的数据字典存起来，下次再使用时不再发送后台请求<br>2.简化页面代码的操作过程，页面直接获取结果使用，不再关心过程</p><h1 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h1><p>使用vuex Store对数据字典数据进行存放<br>使用mixin提升代码复用，mixin可以用来更高效的实现组件内容的复用</p><p>这里vuex配置和使用不在进行介绍，默认项目中配置好了vuex，下面简单介绍一下mixin</p><blockquote><p>官方文档：<br>　　通过创建 Vue 组件，我们可以将界面中重复的部分连同其功能一起提取为可重用的代码段。仅此一项就可以使我们的应用在可维护性和灵活性方面走得相当远。然而，我们的经验已经证明，光靠这一点可能并不够，尤其是当你的应用变得非常大的时候——想想几百个组件。处理这样的大型应用时，共享和重用代码变得尤为重要。<br> 　　混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p></blockquote><p>文档地址：<a href="https://v3.cn.vuejs.org/guide/mixins.html">https://v3.cn.vuejs.org/guide/mixins.html</a></p><blockquote><p>全局混入更为便捷，我们将不用在子组件声明，全局混入将会影响每一个组件的实例，使用的时候需要小心谨慎；这样全局混入之后，我们可以直接在组件中通过this.变量/方法来调用mixin混入对象的变量/方法；</p></blockquote><p>　　mixin是在引入组件之后与组件中的对象和方法进行合并，相当于扩展了父组件的对象与方法，可以理解为形成了一个新的组件，简单来说有点类似于java中的继承</p><p>介绍完毕，接下来开始操作，首先创建以下文件：<br>mixin/metaDataFactoryMixin.js<br>store/modules/app.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span><span class="token comment">/** * 设定自定义属性metaDataType: 用于声明定义组件内使用到的字典表 * * 在metaDataType中声明的字典表可以直接通过metaData和metaDataMapper使用 * * @author liaoyuxing * @date 2021-06-08 */</span><span class="token keyword">const</span> metaDataFactoryMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> metaDataType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>metaDataType <span class="token operator">||</span> <span class="token keyword">null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metaDataType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      metaDataType <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>metaDataType<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span> <span class="token operator">?</span> metaDataType <span class="token operator">:</span> <span class="token punctuation">[</span>metaDataType<span class="token punctuation">]</span>      metaDataType <span class="token operator">=</span> metaDataType<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'metaDataType'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>metaDataType<span class="token punctuation">)</span><span class="token punctuation">)</span>      store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'app/registerMetaDataItems'</span><span class="token punctuation">,</span> metaDataType<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">metaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>metaData    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">metaDataMapper</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> all <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">metaDataMap</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>          <span class="token keyword">return</span> result        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> all      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">metaDataMap</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">metaDataFilter</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">filterMetaData</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  metaDataFactoryMixin<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Cookies <span class="token keyword">from</span> <span class="token string">'js-cookie'</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 获取字典值的接口</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getDictsList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/api/system/dict/data'</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  metaData<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">ADD_META_DATA_ITEMS</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> items</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> items<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> dictCode<span class="token punctuation">,</span> dictValue<span class="token punctuation">,</span> dictLabel <span class="token punctuation">&#125;</span> <span class="token operator">=</span> item        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> dictCode<span class="token punctuation">,</span> dictValue<span class="token punctuation">,</span> dictLabel <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>metaData<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">registerMetaDataItems</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> commit<span class="token punctuation">,</span> state <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> types <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>state<span class="token punctuation">.</span>metaData<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>types <span class="token operator">&amp;&amp;</span> types<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getDictsList</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'ADD_META_DATA_ITEMS'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  state<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  actions<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里store.dispatch的地址是’app/registerMetaDataItems’<br>对应的是app.js中命名空间选项开启的路径 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当命名空间选项关闭时，对应路径应为’registerMetaDataItems’</p><p>接下来将两个文件注册<br>在store/index中加入app.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">'./modules/app'</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    app<span class="token punctuation">,</span>    settings  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main中加入metaDataFactoryMixin进行全局混入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 混入字典方法</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>metaDataFactoryMixin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mixin/metaDataFactoryMixin'</span><span class="token operator">...</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>metaDataFactoryMixin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在store/getters中添加字典的获取和解析方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">metaData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> state<span class="token punctuation">.</span>app<span class="token punctuation">.</span>metaData <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">filterMetaData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> params <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> metaData <span class="token operator">=</span> getters<span class="token punctuation">.</span>metaData<span class="token punctuation">[</span>params<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">return</span> metaData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> params<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> key <span class="token operator">===</span> item<span class="token punctuation">.</span>dictLabel<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> getters<span class="token punctuation">.</span>metaData<span class="token punctuation">[</span>params<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 字典数据</span><span class="token function-variable function">metaDataMap</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sourceMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getters<span class="token punctuation">.</span><span class="token function">filterMetaData</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      getters<span class="token punctuation">.</span><span class="token function">filterMetaData</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        sourceMap<span class="token punctuation">[</span>item<span class="token punctuation">.</span>dictValue<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>dictLabel      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sourceMap  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搭建完毕<br>下面开始使用<br>让我们看看组件中需要做哪些改动：<br>1.声明页面需要使用的字典<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210609093638995.png" alt="在这里插入图片描述"><br>2.为表格增加一个参数表示使用某一字典，修改类型为Map<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/2021060909384251.png" alt="在这里插入图片描述"><br>3.增加type为Map的判断，当为字典时，进行解析处理<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210609094029316.png" alt="在这里插入图片描述"><br>以上代码改为↓</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/2021060909430357.png" alt="在这里插入图片描述"><br>接下来验证结果<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210609094405655.png" alt="在这里插入图片描述"><br>OK，显示成功</p><p>同理，页面中的下拉框也可以使用此方法<br>接下来试一试下拉框的使用<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210609102103864.png" alt="在这里插入图片描述"><br>将解析metaDataMapper改为metaData既可</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210609102145543.png" alt="在这里插入图片描述"><br>OK，显示正常<br>让我们来看一下metaData和metaDataMapper的区别，首先分别看一下它们的输出结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metaData<span class="token punctuation">[</span><span class="token string">'sys_approve_status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token string">"dictCode"</span><span class="token operator">:</span> <span class="token number">95</span><span class="token punctuation">,</span>    <span class="token string">"dictValue"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token string">"dictLabel"</span><span class="token operator">:</span> <span class="token string">"未审批"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token string">"dictCode"</span><span class="token operator">:</span> <span class="token number">96</span><span class="token punctuation">,</span>    <span class="token string">"dictValue"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"dictLabel"</span><span class="token operator">:</span> <span class="token string">"已审批"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token string">"dictCode"</span><span class="token operator">:</span> <span class="token number">97</span><span class="token punctuation">,</span>    <span class="token string">"dictValue"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>    <span class="token string">"dictLabel"</span><span class="token operator">:</span> <span class="token string">"审批驳回"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>metaData返回结果为list</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">metaDataMapper</span><span class="token punctuation">(</span><span class="token string">'sys_approve_status'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string">"0"</span><span class="token operator">:</span> <span class="token string">"未审批"</span><span class="token punctuation">,</span>  <span class="token string">"1"</span><span class="token operator">:</span> <span class="token string">"已审批"</span><span class="token punctuation">,</span>  <span class="token string">"2"</span><span class="token operator">:</span> <span class="token string">"审批驳回"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>metaDataMapper返回结果为map<br>我们可以针对不同的应用场景来选择使用metaData和metaDataMapper，普遍来讲metaData适用于下拉框，而metaDataMapper适用于表格解析</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​        通过Mixin全局混入的方式，我们可以在任意一个组件中使用metaDataMapper和metaData方法来获取字典列表和值，在组件中使用metaDataType声明需要使用的字典，将自动判断Store是否有缓存，动态向后台发送请求获取。<br>简单来说，我们不必关心过程，只需要组件使用metaDataType声明需要的字典，然后使用metaDataMapper和metaData获取字典就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 乱七八糟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 数据字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习记录-使用Canal进行MySql与 PostgresSQL数据库逻辑同步</title>
      <link href="/2021/08/02/shi-yong-canal-jin-xing-mysql-yu-postgressql-shu-ju-ku-luo-ji-tong-bu/"/>
      <url>/2021/08/02/shi-yong-canal-jin-xing-mysql-yu-postgressql-shu-ju-ku-luo-ji-tong-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h2><h3 id="1-安装MySql"><a href="#1-安装MySql" class="headerlink" title="1.安装MySql"></a>1.安装MySql</h3><p>使用yum安装Mysql8.0<br>下载mysql yum<br>地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a><br>选择对应版本下载</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql80-community-release-el8-1.noarch.rpm--2021-04-02 08:32:51--  https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql80-community-release-el8-1.noarch.rpmResolving dev.mysql.com (dev.mysql.com)... 137.254.60.11Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... connected.HTTP request sent, awaiting response... 302 FoundLocation: https:&#x2F;&#x2F;repo.mysql.com&#x2F;&#x2F;mysql80-community-release-el8-1.noarch.rpm [following]--2021-04-02 08:32:53--  https:&#x2F;&#x2F;repo.mysql.com&#x2F;&#x2F;mysql80-community-release-el8-1.noarch.rpmResolving repo.mysql.com (repo.mysql.com)... 23.57.113.239Connecting to repo.mysql.com (repo.mysql.com)|23.57.113.239|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 30388 (30K) [application&#x2F;x-redhat-package-manager]Saving to: ‘mysql80-community-release-el8-1.noarch.rpm’100%[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 30,388      --.-K&#x2F;s   in 0s      2021-04-02 08:32:54 (136 MB&#x2F;s) - ‘mysql80-community-release-el8-1.noarch.rpm’ saved [30388&#x2F;30388][root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装Mysql源</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# yum -y localinstall mysql80-community-release-el8-1.noarch.rpmLoaded plugins: fastestmirrorExamining mysql80-community-release-el8-1.noarch.rpm: mysql80-community-release-el8-1.noarchMarking mysql80-community-release-el8-1.noarch.rpm as an update to mysql80-community-release-el7-3.noarchResolving Dependencies--&gt; Running transaction check---&gt; Package mysql80-community-release.noarch 0:el7-3 will be updated---&gt; Package mysql80-community-release.noarch 0:el8-1 will be an update--&gt; Finished Dependency ResolutionDependencies Resolved&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Package                                                                 Arch                                                 Version                                             Repository                                                                             Size&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Updating: mysql80-community-release                                               noarch                                               el8-1                                               &#x2F;mysql80-community-release-el8-1.noarch                                                29 kTransaction Summary&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Upgrade  1 PackageTotal size: 29 kDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction  Updating   : mysql80-community-release-el8-1.noarch                                                                                                                                                                                                                     1&#x2F;2   Cleanup    : mysql80-community-release-el7-3.noarch                                                                                                                                                                                                                     2&#x2F;2   Verifying  : mysql80-community-release-el8-1.noarch                                                                                                                                                                                                                     1&#x2F;2   Verifying  : mysql80-community-release-el7-3.noarch                                                                                                                                                                                                                     2&#x2F;2 Updated:  mysql80-community-release.noarch 0:el8-1                                                                                                                                                                                                                                    Complete![root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线安装mysql</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum -y install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动并查看Mysql</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# systemctl start mysqld[root@localhost ~]# systemctl status mysqld● mysqld.service - MySQL 8.0 database server   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service; disabled; vendor preset: disabled)   Active: active (running) since Thu 2021-04-01 20:53:35 EDT; 13s ago  Process: 2393 ExecStartPost&#x3D;&#x2F;usr&#x2F;libexec&#x2F;mysql-check-upgrade (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)  Process: 2267 ExecStartPre&#x3D;&#x2F;usr&#x2F;libexec&#x2F;mysql-prepare-db-dir mysqld.service (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)  Process: 2242 ExecStartPre&#x3D;&#x2F;usr&#x2F;libexec&#x2F;mysql-check-socket (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS) Main PID: 2349 (mysqld)   Status: &quot;Server is operational&quot;    Tasks: 39 (limit: 11216)   Memory: 430.2M   CGroup: &#x2F;system.slice&#x2F;mysqld.service           └─2349 &#x2F;usr&#x2F;libexec&#x2F;mysqld --basedir&#x3D;&#x2F;usr4月 01 20:53:31 localhost.localdomain systemd[1]: Starting MySQL 8.0 database server...4月 01 20:53:31 localhost.localdomain mysql-prepare-db-dir[2267]: Initializing MySQL database4月 01 20:53:35 localhost.localdomain systemd[1]: Started MySQL 8.0 database server.[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置开机启动</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# systemctl enable mysqldCreated symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;mysqld.service → &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service.[root@localhost ~]# systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装vim包，然后查看root账户的临时密码</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum install vim[root@localhost ~]# grep “temporary password” &#x2F;var&#x2F;log&#x2F;mysqld.loggrep: password”: 没有那个文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有生产随机密码则需重置密码<br>步骤如下：</p><blockquote><p>1.修改 /etc/my.cnf配置文件，在 [mysqld]下添加一行：skip-grant-tables=1<br>这一行配置让 mysqld 启动时不对密码进行验证<br>2.重启 mysqld 服务：systemctl restart mysqld<br>3.使用 root 用户登录到 mysql：mysql -u root<br>4.切换到mysql数据库(use mysql)，设置root用户密码：<br>ALTER user ‘root‘@’localhost’ IDENTIFIED BY ‘root’;<br>5.修改允许用户远程连接<br>update user set host=”%” where user=“root”<br>6.查看修改结果<br>select user,host from user<br>7.使本次修改立即生效，命令：flush privileges<br>8、quit命令退出 mysql，编辑 /etc/my.cnf 配置文件，删除 skip-grant-tables=1 这一行<br>9、systemctl restart mysqld 重启mysqld服务，再用新密码登录即可<br>附：修改root密码：ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY’root’;</p></blockquote><p>测试连接成功<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210402110625640.png" alt="在这里插入图片描述"></p><h3 id="2-安装PostgreSQL"><a href="#2-安装PostgreSQL" class="headerlink" title="2. 安装PostgreSQL"></a>2. 安装PostgreSQL</h3><p>PostgreSQL安装见上一篇文章</p><h2 id="Canal搭建"><a href="#Canal搭建" class="headerlink" title="Canal搭建"></a>Canal搭建</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><blockquote><p>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump<br>协议 MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal ) canal 解析<br>binary log 对象(原始为 byte 流)</p></blockquote><p>项目github地址：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先我们需要对Mysql数据库进行设置，开启 Binlog 写入功能，配置 binlog-format 为 ROW 模式<br>在/etc/my.cnf 中增加如下配置：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">log-bin&#x3D;mysql-bin # 开启 binlogbinlog-format&#x3D;ROW # 选择 ROW 模式server_id&#x3D;1       # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复binlog_row_image&#x3D;FULL    #解决update更新会无效的问题binlog-do-db&#x3D;canal_test  #需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可。非必填<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启数据库使配置生效</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后为mysql创建一个canal用户备用</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">CREATE USER canal IDENTIFIED BY &#39;canal&#39;;    GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;canal&#39;@&#39;%&#39;;  -- GRANT ALL PRIVILEGES ON *.* TO &#39;canal&#39;@&#39;%&#39; ;  FLUSH PRIVILEGES; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，对Postgresql也创建一个canal用户并授权</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">CREATE user canal CREATEDB PASSWORD &#39;canal&#39; LOGIN;ALTER user canal WITH superuser;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="canal-deployer安装使用"><a href="#canal-deployer安装使用" class="headerlink" title="canal-deployer安装使用"></a>canal-deployer安装使用</h3><p>下载 canal, 访问 <a href="https://github.com/alibaba/canal/releases">项目github地址</a> 页面 , 选择需要的包下载, 如以 1.1.5-alpha-2 版本为例</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;releases&#x2F;download&#x2F;canal-1.1.5-alpha-2&#x2F;canal.deployer-1.1.5-SNAPSHOT.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载完成后，创建目录，然后解压缩</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# mkdir &#x2F;tmp&#x2F;canal[root@localhost ~]# tar zxvf canal.deployer-1.1.5-SNAPSHOT.tar.gz  -C &#x2F;tmp&#x2F;canal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压缩完成后目录如下<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210402133435435.png" alt="在这里插入图片描述"><br>修改instance配置文件（如果使用canal-admin进行管理，这一步可以跳过）<br>修改配置文件：conf/example/instance.properties<br>将数据库地址改为自己的地址<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210402134637297.png" alt="在这里插入图片描述"><br>启动</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sh &#x2F;tmp&#x2F;canal&#x2F;bin&#x2F;startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 server 日志，输入:wq退出</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# vi &#x2F;tmp&#x2F;canal&#x2F;logs&#x2F;canal&#x2F;canal.log2021-04-02 01:47:25.255 [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - ## set default uncaught exception handler2021-04-02 01:47:25.373 [main] INFO  com.alibaba.otter.canal.deployer.CanalLauncher - ## load canal configurations2021-04-02 01:47:25.451 [main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - ## start the canal server.2021-04-02 01:47:25.651 [main] INFO  com.alibaba.otter.canal.deployer.CanalController - ## start the canal server[192.168.60.3(192.168.60.3):11111]2021-04-02 01:47:29.748 [main] INFO  com.alibaba.otter.canal.deployer.CanalStarter - ## the canal server is running now ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看 instance 的日志，输入:wq退出</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# vi &#x2F;tmp&#x2F;canal&#x2F;logs&#x2F;example&#x2F;example.log2021-04-02 01:47:27.137 [main] INFO  c.a.o.c.i.spring.support.PropertyPlaceholderConfigurer - Loading properties file from class path resource [canal.properties]2021-04-02 01:47:27.140 [main] INFO  c.a.o.c.i.spring.support.PropertyPlaceholderConfigurer - Loading properties file from class path resource [example&#x2F;instance.properties]2021-04-02 01:47:27.912 [main] INFO  c.a.o.c.i.spring.support.PropertyPlaceholderConfigurer - Loading properties file from class path resource [canal.properties]2021-04-02 01:47:27.913 [main] INFO  c.a.o.c.i.spring.support.PropertyPlaceholderConfigurer - Loading properties file from class path resource [example&#x2F;instance.properties]2021-04-02 01:47:29.184 [main] INFO  c.a.otter.canal.instance.spring.CanalInstanceWithSpring - start CannalInstance for 1-example2021-04-02 01:47:29.223 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table filter : ^.*\..*$2021-04-02 01:47:29.223 [main] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table black filter : ^mysql\.slave_.*$2021-04-02 01:47:29.266 [main] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps:推荐使用tail -f 命令查看日志</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">tail -f &#x2F;tmp&#x2F;canal&#x2F;logs&#x2F;example&#x2F;example.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>canal启动完成</p><h3 id="canal-admin安装使用"><a href="#canal-admin安装使用" class="headerlink" title="canal-admin安装使用"></a>canal-admin安装使用</h3><p>介绍：<br>        canal-admin设计上是为canal提供整体配置管理、节点运维等面向运维的功能，提供相对友好的WebUI操作界面，方便更多用户快速和安全的操作，canal-admin可以在web页面中直接修改canal-server的配置信息等。</p><p>设计理念：</p><blockquote><p>canal-admin的核心模型主要有：<br>1.instance，对应canal-server里的instance，一个最小的订阅mysql的队列<br>2.server，对应canal-server，一个server里可以包含多个instance<br>3.集群，对应一组canal-server，组合在一起面向高可用HA的运维</p></blockquote><p>下载压缩包：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;releases&#x2F;download&#x2F;canal-1.1.5-alpha-2&#x2F;canal.admin-1.1.5-SNAPSHOT.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压、安装：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# mkdir &#x2F;tmp&#x2F;canal-admin[root@localhost ~]# tar zxvf canal.admin-1.1.5-SNAPSHOT.tar.gz  -C &#x2F;tmp&#x2F;canal-admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sh &#x2F;tmp&#x2F;canal-admin&#x2F;bin&#x2F;startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动完成后访问地址：<br><a href="http://192.168.60.3:8089/">http://192.168.60.3:8089</a><br>默认账号密码为:<br>admin 123456</p><p>点击新建server<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407104208469.png" alt="在这里插入图片描述"><br>填写上一步启动的canal-server地址，端口号使用默认值既可<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407104320766.png" alt="在这里插入图片描述"><br>修改配置<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407104502363.png" alt="修改配置"><br>点击载入模板，使用默认值保存既可<br>这里需要将账号密码记下来，后面客户端建立连接时需要使用<br>如果需要修改密码，注意密码是16进制的，字母组合只能使用A-F（我这里第一次测试没用16进制，是可以的。但是后来报了一个密码转16进制无法转换的错误，尽量使用可以避免问题发生）<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/202104071047313.png" alt="在这里插入图片描述"><br>然后新建instance实例<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407104853736.png" alt="在这里插入图片描述"><br>填写instance名称和主机地址，然后点载入模板保存既可。<br>这里的instance名称example是canal-server安装时的默认值，对应的是在/tmp/canal/conf目录下的example文件夹。<br>新建的instance名称需要与/tmp/canal/conf目录下的文件夹名对应，如果不想使用example的话，直接复制粘贴example重命名既可</p><p>instance名称对应服务器文件为：<br>/tmp/canal/conf/example/instance.properties<br>其中example为instance名称<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407105113167.png" alt="在这里插入图片描述"><br>在web端修改完成就会自动将配置上传至canal服务器对应的目录下，配置是动态生效的<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407110902528.png" alt="在这里插入图片描述"><br>查看状态没问题，canal-admin配置完成</p><h3 id="canal-adapter安装使用"><a href="#canal-adapter安装使用" class="headerlink" title="canal-adapter安装使用"></a>canal-adapter安装使用</h3><p>官方介绍：</p><blockquote><p>canal 1.1.1版本之后, 增加客户端数据落地的适配及启动功能, 目前支持功能:</p><ul><li>客户端启动器</li><li>同步管理REST接口</li><li>日志适配器, 作为DEMO</li><li>关系型数据库的数据同步(表对表同步), ETL功能</li><li>HBase的数据同步(表对表同步), ETL功能</li><li>(后续支持) ElasticSearch多表数据同步,ETL功能</li></ul></blockquote><p>下载canal-adapter压缩包</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;releases&#x2F;download&#x2F;canal-1.1.5-alpha-2&#x2F;canal.adapter-1.1.5-SNAPSHOT.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装adapter：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# mkdir &#x2F;tmp&#x2F;canal-adapter[root@localhost ~]# tar zxvf canal.adapter-1.1.5-SNAPSHOT.tar.gz  -C &#x2F;tmp&#x2F;canal-adapter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我这里使用了远程配置中心(Mysql，可扩展)作为统一配置管理，<br>修改配置文件：<br>/tmp/canal-adapter/conf/bootstrap.yml</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">canal:  manager:    jdbc:      url: jdbc:mysql:&#x2F;&#x2F;192.168.60.3:3306&#x2F;canal_manager?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8      username: canal      password: canal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>canal_config表id=2的数据对应adapter下的application.yml文件<br>canal_adapter_config表对应每个adapter的子配置文件<br>content字段对应内容为yml文件内容<br>注意：必须是表中id=2的数据，这里应该是canal-ui部分没开发完，canal-adapter远程配置和canal-admin服务使用的是同一张表，而且没有web端页面，暂时只能从数据库中配置。<br>当然，你也可以再建一个数据库，可以避免与canal-admin业务冲突<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407113141168.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407113545706.png" alt="在这里插入图片描述"><br>canal_config.content：</p><pre class="line-numbers language-none"><code class="language-none">server:  port: 8081spring:  jackson:    date-format: yyyy-MM-dd HH:mm:ss    time-zone: GMT+8    default-property-inclusion: non_nullcanal.conf:  mode: tcp  canalServerHost: 192.168.60.3:11111     # 对应单机模式下的canal server的ip:port  flatMessage: true                       # 扁平message开关, 是否以json字符串形式投递数据, 仅在kafka&#x2F;rocketMQ模式下有效  zookeeperHosts:  syncBatchSize: 1000  retries: 0  timeout:  accessKey:  secretKey:#  canalInstances:                        # canal实例组, 如果是tcp模式可配置此项  consumerProperties:    # canal tcp consumer    canal.tcp.server.host: 192.168.60.3:11111    canal.tcp.zookeeper.hosts:    canal.tcp.batch.size: 500    canal.tcp.username: admin    canal.tcp.password: 4ACFE3202A5FF5CF467898FC58AAB1D615029441    # kafka consumer    kafka.bootstrap.servers: 127.0.0.1:9092    kafka.enable.auto.commit: false    kafka.auto.commit.interval.ms: 1000    kafka.auto.offset.reset: latest    kafka.request.timeout.ms: 40000    kafka.session.timeout.ms: 30000    kafka.isolation.level: read_committed    kafka.max.poll.records: 1000    # rocketMQ consumer    rocketmq.namespace:    rocketmq.namesrv.addr: 127.0.0.1:9876    rocketmq.batch.size: 1000    rocketmq.enable.message.trace: false    rocketmq.customized.trace.topic:    rocketmq.access.channel:    rocketmq.subscribe.filter:    # rabbitMQ consumer    rabbitmq.host:    rabbitmq.virtual.host:    rabbitmq.username:    rabbitmq.password:    rabbitmq.resource.ownerId:  srcDataSources:    centralDS:      url: jdbc:mysql:&#x2F;&#x2F;192.168.60.3:3306&#x2F;canal_test?useUnicode&#x3D;true      username: canal      password: canal  canalAdapters:  - instance: mpc    groups:    - groupId: g1      outerAdapters:#      - name: logger#      - name: rdb#        key: mpcDB#        properties:#          jdbc.driverClassName: com.mysql.jdbc.Driver#          jdbc.url: jdbc:mysql:&#x2F;&#x2F;192.168.60.4:3306&#x2F;canal_test?useUnicode&#x3D;true#          jdbc.username: canal#          jdbc.password: canal#      - name: rdb#        key: oracle1#        properties:#          jdbc.driverClassName: oracle.jdbc.OracleDriver#          jdbc.url: jdbc:oracle:thin:@localhost:49161:XE#          jdbc.username: mytest#          jdbc.password: m121212      - name: rdb        key: mpcDB        properties:          jdbc.driverClassName: org.postgresql.Driver          jdbc.url: jdbc:postgresql:&#x2F;&#x2F;192.168.60.4:3306&#x2F;canal_test          jdbc.username: canal          jdbc.password: canal          threads: 1          commitSize: 3000#      - name: hbase#        properties:#          hbase.zookeeper.quorum: 127.0.0.1#          hbase.zookeeper.property.clientPort: 2181#          zookeeper.znode.parent: &#x2F;hbase#      - name: es#        hosts: 127.0.0.1:9300 # 127.0.0.1:9200 for rest mode#        properties:#          mode: transport # or rest#          # security.auth: test:123456 #  only used for rest mode#          cluster.name: elasticsearch#        - name: kudu#          key: kudu#          properties:#            kudu.master.address: 127.0.0.1 # &#39;,&#39; split multi address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>canal_adapter_config.content：</p><pre class="line-numbers language-none"><code class="language-none">dataSourceKey: centralDS       # 源数据源的key, 对应上面配置的srcDataSources中的值destination: mpc               # cannal的instance或者MQ的topicgroupId: g1                    # 对应MQ模式下的groupId, 只会同步对应groupId的数据outerAdapterKey: mpcDB         # 对应application.yml配置outerAdapters中的keyconcurrent: false               # 是否按主键hase并行同步, 并行同步的表必须保证主键不会更改及主键不能为其他同步表的外键!!dbMapping:#  mirrorDb: true              # 是否为镜像数据库  database: canal_test         # 源数据源的database&#x2F;shcema  table: sys_user              # 源数据源表名  targetTable: canal_test.sys_user        # 目标数据源的库名.表名  targetPk:                    # 主键映射    user_id: user_id           # 如果是复合主键可以换行映射多个#  mapAll: true                # 是否整表映射, 要求源表和目标表字段名一模一样 (如果targetColumns也配置了映射,则以targetColumns配置为准)  targetColumns:               # 字段映射, 格式: 目标表字段: 源表字段, 如果字段名一样源表字段名可不填    user_id:    user_name: nick_name    nick_name: user_name    dept_id:  commitBatch: 3000            # 批量提交的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在服务启动时，会自动将canal_config表和canal_adapter_config表的content字段数据加载到服务器，生成对应的yml配置文件</p><p>启动，查看日志</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# sh &#x2F;tmp&#x2F;canal-adapter&#x2F;bin&#x2F;startup.sh[root@localhost ~]# tail -f &#x2F;tmp&#x2F;canal-adapter&#x2F;logs&#x2F;adapter&#x2F;adapter.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看服务开启状态：<br><a href="http://127.0.0.1:8081/destinations">http://127.0.0.1:8081/destinations</a></p><p>好了，服务都启动完成了，现在来对Mysql数据库进行增删改查，验证一下结果</p><p>结果居然失败了，我这里遇到了两个问题<br>第一个问题：我这里使用的postgres数据库版本是13，而我用的canal-adapterde 数据库驱动版本是postgresql-42.1.4.jar，是不支持postgres13的。需要手动下载高版本的数据库驱动，将原来的jar替换掉。<br>我的解决办法：手动将jar包升级到了42.2.18.jar，问题解决。<br>第二个问题：数据库SQL报错，错误如下</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">2021-04-07 02:07:41.503 [pool-3-thread-1] ERROR c.a.otter.canal.adapter.launcher.loader.AdapterProcessor - java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.RuntimeException: org.postgresql.util.PSQLException: 错误: 语法错误 在 &quot;&#96;&quot; 或附近的  Position: 47java.lang.RuntimeException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.RuntimeException: org.postgresql.util.PSQLException: 错误: 语法错误 在 &quot;&#96;&quot; 或附近的  Position: 47at com.alibaba.otter.canal.client.adapter.rdb.RdbAdapter.sync(RdbAdapter.java:171) ~[na:na]at com.alibaba.otter.canal.adapter.launcher.loader.AdapterProcessor.batchSync(AdapterProcessor.java:139) ~[client-adapter.launcher-1.1.5-SNAPSHOT.jar:na]at com.alibaba.otter.canal.adapter.launcher.loader.AdapterProcessor.lambda$null$1(AdapterProcessor.java:97) ~[client-adapter.launcher-1.1.5-SNAPSHOT.jar:na]at java.util.concurrent.CopyOnWriteArrayList.forEach(CopyOnWriteArrayList.java:895) ~[na:1.8.0_275]at com.alibaba.otter.canal.adapter.launcher.loader.AdapterProcessor.lambda$null$2(AdapterProcessor.java:94) ~[client-adapter.launcher-1.1.5-SNAPSHOT.jar:na]at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_275]at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_275]at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_275]at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_275]Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.RuntimeException: org.postgresql.util.PSQLException: 错误: 语法错误 在 &quot;&#96;&quot; 或附近的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过一番排查发现这是Client-Adapter在1.14版本引入的BUG<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407150056394.png" alt="在这里插入图片描述"><br>修复方案：<br>github给出的修复方案：<a href="https://github.com/alibaba/canal/pull/3020">https://github.com/alibaba/canal/pull/3020</a><br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210407150320507.png" alt="在这里插入图片描述"><br>目前BUG在最新的发行版中并没有修复，那么就需要自己按照以上方案修改源码打包jar<br>我这人比较懒，修改源码自己打包不是我的风格<br>既然是1.1.4引入的BUG，而且我查看了1.1.4的更新内容对于我的需求几乎没有影响，所以我决定安装1.1.3版本</p><p>下载canal-adapter1.1.3压缩包</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;releases&#x2F;download&#x2F;canal-1.1.3&#x2F;canal.adapter-1.1.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压，安装：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">[root@localhost ~]# mkdir &#x2F;tmp&#x2F;canal-adapter-1.1.3[root@localhost ~]# tar zxvf canal.adapter-1.1.3.tar.gz  -C &#x2F;tmp&#x2F;canal-adapter-1.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样的，需要修改postgresql的驱动版本<br>配置过程省略…与上面的1.1.5版本一致</p><p>直接验证结果，发现SQL报错<br>排查原因结果：在执行插入语句时主键未同步，插入SQL中不包含主键信息。原因是1.1.3版本和1.1.5配置文件规则不同导致<br>在sys_user.yml文件中，1.1.5版本配置了主键映射targetPk后，字段映射targetColumns会默认把主键带上，而1.1.3版本未加入此功能。所以在targetColumns中将主键也加上就好了，完整配置如下：</p><pre class="line-numbers language-none"><code class="language-none">dataSourceKey: centralDS       # 源数据源的key, 对应上面配置的srcDataSources中的值destination: mpc               # cannal的instance或者MQ的topicgroupId: g1                    # 对应MQ模式下的groupId, 只会同步对应groupId的数据outerAdapterKey: mpcDB         # 对应application.yml配置outerAdapters中的keyconcurrent: false               # 是否按主键hase并行同步, 并行同步的表必须保证主键不会更改及主键不能为其他同步表的外键!!dbMapping:  database: canal_test         # 源数据源的database&#x2F;shcema  table: sys_user              # 源数据源表名  targetDb: canal_test       targetTable: public.sys_user # 目标数据源的库名.模式名.表名  targetPk:                    # 主键映射    user_id: user_id           # 如果是复合主键可以换行映射多个  targetColumns:               # 字段映射, 格式: 目标表字段: 源表字段, 如果字段名一样源表字段名可不填    user_id: user_id    user_name: nick_name    nick_name: user_name    dept_id:  commitBatch: 3000 # 批量提交的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，再次进行验证<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210408092041998.png" alt="验证同步结果"><br>至此，增删改操作已经完成了同步</p><h3 id="查看Canal源码"><a href="#查看Canal源码" class="headerlink" title="查看Canal源码"></a>查看Canal源码</h3><p>从Git上下载Canal项目，可以查看源码<br><a href="https://github.com/alibaba/canal.git">https://github.com/alibaba/canal.git</a><br>由于github访问速度太慢，我这里使用的是国内镜像地址<br><a href="https://codechina.csdn.net/mirrors/alibaba/canal.git">https://codechina.csdn.net/mirrors/alibaba/canal.git</a><br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210402131528239.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/witleo/blogimg/raw/master/img/20210402131547640.png" alt="从github下载源码"></p><p>参考网站：<br><a href="https://developer.aliyun.com/article/706226">https://developer.aliyun.com/article/706226</a><br><a href="https://github.com/alibaba/canal/wiki">https://github.com/alibaba/canal/wiki</a><br>canal-v1.1.4中文文档地址：<br><a href="https://www.bookstack.cn/read/canal-v1.1.4/a22d6e84c9c69d82.md">https://www.bookstack.cn/read/canal-v1.1.4/a22d6e84c9c69d82.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 乱七八糟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgresSQL </tag>
            
            <tag> Canal </tag>
            
            <tag> 数据同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo框架搭建自己的个人博客</title>
      <link href="/2021/07/21/li-yong-hexo-da-jian-bo-ke/"/>
      <url>/2021/07/21/li-yong-hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个基于nodejs 的静态博客网站生成器，是我们用来构建一个博客网站的基础。<br>当然市场上类似的产品很多，比如 Jekyll 和Hugo等等，原理基本都是差不多的，如果你有自己喜欢的构建工具，也可以替代Hexo </p><blockquote><p>什么是 Hexo？<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档链接</a></p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><blockquote><p>什么是GitHub Pages？<br>GitHub Pages 是直接从 GitHub 存储库托管的静态网站。 但它们不仅仅是静态文件的集合。 通过利用 Jekyll 和 Liquid 等网站生成技术，开发人员可定义被处理为完整静态网站的动态模板。 每次将更改提交到与网站关联的源分支时，都会使用最新更新重新生成该更改，并自动将其发布到目标 URL。</p></blockquote><p><a href="https://pages.github.com/">GitHub Pages官网链接</a><br>简单的说，就是把你的博客网站放在GitHub Pages上进行免费托管，让大家都能访问<br>GitHub Pages也可以换成任意一个支持Hexo的托管服务</p><p>比如Gitee Pages、coding、Vercel等等<br>当然，我原本是想使用Gitee Pages的，毕竟国内的访问速度会快很多，但是…<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1626857103252.png" alt="Gitee Pages服务"></p><p>居然是因为政策法规影响，不得已放弃</p><p>你现在所浏览的博客就是利用hexo+github搭建而成的，并且完全免费，不会产生任何费用（当然，如果你想使用自己的域名，可能会产生相关费用）</p><p>如果你的基础较好，或者对此类开发部署方法有所了解，也可以试试使用Vercel托管</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><blockquote><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：<br>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<br>Git</p></blockquote><p>这里默认你已经安装好了Node.js和Git，安装过程不再赘述</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：-g是指全局安装hexo</p><p>创建一个文件夹，用来存放你的项目代码，进入文件夹内，开始进行hexo 初始化</p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时刷新文件夹就可以看到整个项目的文件目录结构了，然后安装依赖</p><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续下一步，进行构建，构建完成会生成一个public文件夹<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1626857847132.png" alt="项目结构"></p><p>public文件夹内就是我们生成的静态网站内容，我们在部署到github时，就是上传这部分代码<br>这里已经安装并构建完成了，我们可以启动看看效果</p><pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/1626858130233.png" alt="执行hexo server"><br>注：这里看到我执行的是hexo s 实际上是hexo server命令的简写，效果是一样的<br>hexo命令：</p><ul><li>hexo clean ##清理</li><li>hexo g ##构建、编译</li><li>hexo s ##启动服务</li><li>hexo d ##上传至服务器<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1626858445714.png" alt="默认主题首页"><br>这就是博客的默认主题页面了，下一步开始进行更换主题</li></ul><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>我们可以看到官方默认提供的主题功能并不多，页面也比较简单，当然我们可以自己进行修改，但是官方也提供一些网友自己制作的主题，功能更加丰富，可以直接套用<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627006415456.png" alt="官网首页-主题介绍"></p><p><a href="https://hexo.io/themes/">主题选取页面</a></p><p>你可以从官方提供的主题库中选取增加喜欢的主题<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627007882969.png" alt="主题市场页面"></p><p>附上我使用的主题链接：<br><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-10">Hexo博客主题之hexo-theme-matery</a></p><p>每个主题内会有安装调试的使用介绍，因为每个主题的设置项不同，这里不再展开复述，请按照主题内教程进行配置</p><h2 id="Hexo扩展插件"><a href="#Hexo扩展插件" class="headerlink" title="Hexo扩展插件"></a>Hexo扩展插件</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码。</p></blockquote><p>在 Hexo 中有两种形式的插件，脚本（Scripts）和插件（Packages），这里不讨论脚本（Scripts）形式，只介绍和推荐插件（Packages）形式</p><p>扩展插件可以很方便的使我们的博客功能更加丰富<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627008344829.png" alt="插件市场页面"></p><p><a href="https://hexo.io/plugins/">插件列表地址</a></p><p>我们可以看到，官方给出的插件库中足足有385个插件可以使用<br>这些插件都能做什么呢？举个栗子<br>在我所使用的主题中，就应用到了以下几个插件：</p><ul><li>hexo-permalink-pinyin :<br>中文链接转拼音<br>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</li><li>hexo-generator-search<br>内容搜索插件</li><li>hexo-wordcount<br>文章字数统计插件<br>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</li><li>hexo-filter-github-emojis<br>添加emoji表情支持<br>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情。</li><li>hexo-generator-feed<br>RSS 订阅支持</li></ul><p>好，插件就介绍到这里，接下来我们安装几个我们需要使用的插件（当然，你也可以不使用，非必须）</p><h3 id="安装hexo-deployer-git插件"><a href="#安装hexo-deployer-git插件" class="headerlink" title="安装hexo-deployer-git插件"></a>安装hexo-deployer-git插件</h3><blockquote><p>Hexo 的Git 一键部署插件。</p></blockquote><p>我们在插件市场搜索deployer，可以看到官方已经提供了大部分平台的一键部署插件，我们前面选用的是github，所以我们对应的需要使用hexo-deployer-git插件<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627009687046.png" alt="插件市场页面"></p><p><a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git插件地址</a></p><p><strong>安装</strong></p><hr><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置项说明</strong></p><hr><p>找到根目录下的文件 _config.yml 配置你的git信息</p><pre class="line-numbers language-none"><code class="language-none"># You can use this:deploy:  type: git  repo: &lt;repository url&gt;  branch: [branch]  token: &#39;&#39;  message: [message]  name: [git user]  email: [git email]  extend_dirs: [extend directory]  ignore_hidden: false # default is true  ignore_pattern: regexp  # whatever file that matches the regexp will be ignored when deploying# or this:deploy:  type: git  message: [message]  repo: &lt;repository url&gt;[,branch]  extend_dirs:    - [extend directory]    - [another extend directory]  ignore_hidden:    public: false    [extend directory]: true    [another extend directory]: false  ignore_pattern:    [folder]: regexp  # or you could specify the ignore_pattern under a certain directory# Multiple repositoriesdeploy:  repo:    # Either syntax is supported    [repo_name]: &lt;repository url&gt;[,branch]    [repo_name]:      url: &lt;repository url&gt;      branch: [branch]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置项看起来很复杂？我们只需要配置其中简单的几项就可以:</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: &#39;git&#39;  repository: &#39;https:&#x2F;&#x2F;github.com&#x2F;witleo&#x2F;witleo.github.io.git&#39;  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注：无论是部署到GitHub Pages，还是Gitee Pages或者GitLab Pages，部署方式都是相同的，你只需要修改你的Git地址就可以了</p><h3 id="安装hexo-admin插件"><a href="#安装hexo-admin插件" class="headerlink" title="安装hexo-admin插件"></a>安装hexo-admin插件</h3><blockquote><p>hexo-admin 是一个Hexo博客引擎的管理用户界面插件。这个插件最初是作为本地编辑器设计的，在本地运行hexo使用hexo-admin编写文章，然后通过hexo g或hexo d（hexo g是本地渲染，hexo d是将渲染的静态页面发布到GitHub）将生成的静态页面发布到GitHub等静态服务器。如果你使用的是非静态托管服务器，比如自己买的主机搭建的hexo，那么一定要设置hexo-admin 的密码，否则谁都可以编辑你的文章。</p></blockquote><p><strong>安装</strong></p><hr><pre class="line-numbers language-none"><code class="language-none">npm install hexo-admin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后启动hexo</p><pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 <a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a> 就可以访问到hexo-admin管理页面了</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627011252805.png" alt="admin管理页面"><br>hexo-admin的功能很多，你可以通过后台界面发布文章，修改一些设置项，还可以执行脚本等等，这里不做过多介绍，总之它可以帮助我们更好的管理博客网站</p><h1 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h1><p>​        网站已经搭建好了，现在最重要的就是让所有人可以访问你的博客，我们利用GitHub提供的免费Pages服务来实现这一点</p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><p>我这里假设你已经注册好了GitHub的账号，并且你可以正常访问GitHub的网址<br>首先，创建一个项目<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627012207600.png" alt="创建仓库"><br>这里起名时要注意一点，GitHub Pages提供路径两种方式</p><ol><li>username.github.io</li><li>username.github.io/projectname</li></ol><p>第一种是个人主页，第二种是项目主页<br>每个人只能有一个个人主页，可以有多个项目主页<br>如果你希望使用搭建个人主页（推荐），起名时需要使用： 你的用户名.github.io 这种格式，如下图所示<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627012261870.png" alt="填写仓库信息"></p><h2 id="开启Pages服务"><a href="#开启Pages服务" class="headerlink" title="开启Pages服务"></a>开启Pages服务</h2><p>创建完成后复制你的GitHub地址<br><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627012958795.png" alt="复制地址"></p><p>打开hexo项目根目录下的文件 _config.yml 配置你的git信息</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: &#39;git&#39;  repository: &#39;https:&#x2F;&#x2F;github.com&#x2F;witleo&#x2F;witleo.github.io.git&#39;  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置好了之后，回到你的hexo项目目录，执行命令</p><pre class="line-numbers language-none"><code class="language-none">hexo deploy <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hexo deploy 命令会将public目录的文件强制推送到github上，现在到你的github上就能看到编译完成的网站代码了</p><p>然后到GitHub上开启你的Pages服务</p><p>点击 设置 - Pages ，路径选择root，然后保存</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/1627541610280.png" alt="设置Pages"></p><p>我们稍作等待，直接访问我们在Pages显示的地址就可以访问博客了</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>我这里的设置使用了自己的域名，如果你有自己的域名，也可以在Custom domain中添加</p><h1 id="编写博文"><a href="#编写博文" class="headerlink" title="编写博文"></a>编写博文</h1><h2 id="使用Markdown格式编写博文"><a href="#使用Markdown格式编写博文" class="headerlink" title="使用Markdown格式编写博文"></a>使用Markdown格式编写博文</h2><p>首先，我们编写博客的文章需要使用markdown 格式，什么是markdown ？</p><blockquote><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性</p></blockquote><p>现在，几乎所有的博客网站都已经支持Markdown语法，包括CSND、博客园等等</p><blockquote><p>Markdown，这个至今没有中文译名的书写工具，作为比特世界的「笔」，自被发明之初就随着博客发展的浪潮传向互联网的每一片大陆，成为新闻民主化进程中的重要工具。不过它的拥趸在为它唱赞歌的同时，更多的人或胆怯于它陌生的使用方式，或不屑于它复杂的标记字符，始终没有领略这一工具的优雅。<br><a href="https://sspai.com/post/36610">Markdown快速入门</a></p></blockquote><p>OK，我们还需要一款markdown编辑器帮助你来完成排版。<br>当然，就算你使用记事本也可以<br>我目前使用的markdown客户端是Typora</p><blockquote><p>Typora 是一款支持实时预览的 Markdown 文本编辑器。它有 OS X、Windows、Linux 三个平台的版本，是完全免费的。</p></blockquote><p>关于Typora的主要特点都在<a href="https://sspai.com/post/54912/">这里</a>，我就不再赘述了</p><p>如果你不想安装新软件，也可以试试印象笔记推出的在线编辑器<a href="https://maxiang.io/">马克飞象</a><br>他会将你的笔记存在本地，也可以一键同步到印象笔记</p><h2 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h2><blockquote><p>图床，顾名思义 指储存图片的服务器，就是专门用来存放图片，同时允许你把图片对外连接的网上空间，它可以将照片转换成更容易分享的代码、链接等等，提高用户图片的使用效率。</p></blockquote><p>下面的文章介绍的很详细，这里不再赘述</p><p>本文使用<strong>Typora+PicGo-Core+Gitee</strong>实现</p><p>参考文章：</p><ul><li><a href="https://www.jianshu.com/p/634aa5cee379">为什么要使用图床？七牛云+PicGo+Snipaste=畅享丝滑</a></li><li><a href="https://blog.csdn.net/m0_48683050/article/details/108433174">Typora+PicGo-Core实现图片自动上传图床详细说明</a></li></ul><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>我们以上工作都部署完成了，就可以愉快的写文章了</p><p>正常来讲，教程到这里就应该结束了</p><p>但是，按照上面的教程，我们发布一遍文章的顺序是这样的：</p><ol><li>使用Typora来编写文章</li><li>删除\hexo\source\_posts文件夹下的内容</li><li>将编写之后的md文件复制到\hexo\source\_posts文件夹下</li><li>打开cmd窗口，定位到hexo下</li><li>执行hexo deploy 命令上传文章</li></ol><p>对于这么机械化的操作流程，作为一个脚本重度用户，肯定是需要使用脚本来自动完成的</p><p>首先创建一个.bat文件</p><p>然后按照上面列出的步骤，实现脚本：</p><pre class="line-numbers language-none"><code class="language-none">@echo offecho ---------------------1.进入到你的hexo文件夹目录下---------------------d:cd D:\work\hexo\echo ---------------------2.清空项目的_posts文件夹---------------------del &#x2F;f &#x2F;s &#x2F;q D:\work\hexo\source\_posts\*.*echo ---------------------3.将你的md文档复制到_posts文件夹内---------------------copy D:\work\md文档\外部文档\*.md D:\work\hexo\source\_postsecho ---------------------4.清理项目---------------------call hexo cleanecho ---------------------5.上传到github---------------------call hexo deployecho ---------------------完成---------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，这样我们点击执行脚本，就可以一键部署到github了</p><p>正常来讲，教程到这里又该结束了</p><p>但是，这样还是要离开Typora编辑器。用过IDEA之类编辑器的都知道，在IDEA内部就能执行脚本，并且还能保存脚本配置，在你下次使用时，只需要点一个按钮就可以完成复杂的工作</p><p>那么能不能把脚本集成到Typora内呢，我翻遍了Typora的设置项，终于让我找到了一处可以执行脚本的地方</p><p>官方文档介绍说，可以在导出时触发命令，例如:要将当前文件提交到 git 服务器，你可以在这里使用<code>git add</code>命令</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802141017230.png" alt="官网介绍文档"></p><p>原文连接：<a href="https://support.typora.io/Export/#other-formats-using-custom-commands">https://support.typora.io/Export/#other-formats-using-custom-commands</a></p><p>OK，我们可以在此处加入我们的脚本</p><p>点击 文件 - 偏好设置 - 导出 ，我们添加一个导出项</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802141713227.png" alt="添加导出项"></p><p>模板选择自定义</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802141846138.png" alt="新增模板"></p><p>在命令行处添加我们上面写好的脚本路径</p><pre class="line-numbers language-none"><code class="language-none">call D:\Typora\uploadToGihub.bat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802141946743.png" alt="添加脚本路径"></p><p>接下来我们验证一下，创建一个测试md文件，然后点击文件 - 导出 - 上传到github</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802142324124.png" alt="选择上传到github"></p><p>在Typora顶部会提示正在导出，此时正在执行脚本</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802142508430.png" alt="正在导出提示"></p><p>待脚本执行完成后，Typora顶部会进行提示，当失败时会弹出窗口显示log日志</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802150030806.png" alt="脚本执行完成提示"></p><p>可以看到这里提示我上传成功了,日志中都是强制推送覆盖的警告，我们不用管</p><p>稍待片刻，访问博客网站进行验证</p><p><img src="https://gitee.com/witleo/blogimg/raw/master/img/image-20210802142435890.png" alt="上传成功"></p><p>OK，已经可以看到我们刚才创建的文件已经上传成功了</p><p>现在，我们仅在Typora内就可以完成编写文章和上传部署的所有操作了</p><p>一键部署演示：</p><p><a href="https://gitee.com/witleo/blogimg/raw/master/img/20210803102413-102900-104828.gif">查看演示效果</a></p>]]></content>
      
      
      <categories>
          
          <category> 乱七八糟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
